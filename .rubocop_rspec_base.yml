# This file was generated on 2019-07-24T15:33:53+02:00 from the rspec-dev repo.
# DO NOT modify it by hand as your changes will get lost the next time it is generated.

# This file contains defaults for RSpec projects. Individual projects
# can customize by inheriting this file and overriding particular settings.

# Warns when the class is excessively long.
Metrics/ClassLength:
  Max: 100

Metrics/AbcSize:
  Enabled: false

Style/CollectionMethods:
  PreferredMethods:
    reduce: 'inject'

# We use YARD to enforce documentation. It works better than rubocop's
# enforcement...rubocop complains about the places we re-open
# `RSpec::Expectations` and `RSpec::Matchers` w/o having doc commments.
Style/Documentation:
  Enabled: false

Style/DoubleNegation:
  Enabled: false

Style/FormatString:
  EnforcedStyle: percent

# Who cares what we call the argument for binary operator methods?
Naming/BinaryOperatorParameterName:
  Enabled: false

Style/PercentLiteralDelimiters:
  PreferredDelimiters:
    '%':  ()      # double-quoted string
    '%i': '[]'    # array of symbols
    '%q': ()      # single-quoted string
    '%Q': ()      # double-quoted string
    '%r': '{}'    # regular expression pattern
    '%s': ()      # a symbol
    '%w': '[]'    # array of single-quoted strings
    '%W': '[]'    # array of double-quoted strings
    '%x': ()      # a shell command as a string

# We have too many special cases where we allow generator methods or prefer a
# prefixed predicate due to it's improved readability.
Naming/PredicateName:
  Enabled: false

# Exceptions should be rescued with `Support::AllExceptionsExceptOnesWeMustNotRescue`
Lint/RescueException:
  Enabled: true

# We haven't adopted the `fail` to signal exceptions vs `raise` for re-raises convention.
Style/SignalException:
  Enabled: false

# We don't care about single vs double qoutes.
Style/StringLiterals:
  Enabled: false

Layout/EmptyLineAfterMagicComment:
  Enabled: false

Layout/FirstArrayElementIndentation:
  Enabled: false

Layout/AssignmentIndentation:
  Enabled: false

Layout/HeredocIndentation:
  Enabled: false

Layout/SpaceInsidePercentLiteralDelimiters:
  Enabled: false

Layout/EmptyLineBetweenDefs:
  Enabled: false

Layout/FirstArgumentIndentation:
  Enabled: false

Layout/ParameterAlignment:
  EnforcedStyle: with_first_parameter

Layout/ClosingParenthesisIndentation:
  Enabled: false

Layout/ExtraSpacing:
  Enabled: false

Layout/MultilineMethodCallBraceLayout:
  Enabled: false

Layout/MultilineMethodCallIndentation:
  Enabled: false

Layout/MultilineOperationIndentation:
  Enabled: false

Layout/SpaceAroundBlockParameters:
  Enabled: false

Layout/SpaceAroundOperators:
  Enabled: false

Layout/SpaceBeforeComma:
  Enabled: false

Layout/SpaceInsideStringInterpolation:
  Enabled: false

Layout/EmptyLinesAroundBlockBody:
  Enabled: false

Layout/EmptyLinesAroundAccessModifier:
  Enabled: false

Lint/ImplicitStringConcatenation:
  Enabled: false

Lint/NestedMethodDefinition:
  Enabled: false

Naming/HeredocDelimiterNaming:
  Enabled: false

Naming/ConstantName:
  Enabled: false

Naming/VariableNumber:
  Enabled: false

Layout/AccessModifierIndentation:
  Enabled: false

# "Use alias_method instead of alias"
# We're fine with `alias`.
Style/Alias:
  Enabled: false

# "Avoid the use of the case equality operator ==="
# We prefer using `Class#===` over `Object#is_a?` because `Class#===`
# is less likely to be monkey patched than `is_a?` on a user object.
Style/CaseEquality:
  Enabled: false

# This rule favors constant names from the English standard library which we don't load.
Style/SpecialGlobalVars:
  Enabled: false

Style/TrailingCommaInArrayLiteral:
  Enabled: false

Style/TrailingCommaInHashLiteral:
  Enabled: false

Style/TrailingCommaInArguments:
  Enabled: false

Style/TrivialAccessors:
  AllowDSLWriters: true
  AllowPredicates: true
  ExactNameMatch: true

Style/ParallelAssignment:
  Enabled: false

Style/ClassCheck:
  Enabled: false

Style/ConditionalAssignment:
  Enabled: false

Style/EmptyMethod:
  Enabled: false

Style/FormatStringToken:
  Enabled: false

Style/FrozenStringLiteralComment:
  Enabled: false

Style/GuardClause:
  Enabled: false

Style/IdenticalConditionalBranches:
  Enabled: false

Style/IfUnlessModifier:
  Enabled: false

Style/IfUnlessModifierOfIfUnless:
  Enabled: false

Style/MethodMissingSuper:
  Enabled: false

Style/MissingRespondToMissing:
  Enabled: false

Style/MixinUsage:
  Enabled: false

Style/MultipleComparison:
  Enabled: false

Style/MutableConstant:
  Enabled: false

Style/NestedModifier:
  Enabled: false

Style/NestedParenthesizedCalls:
  Enabled: false

Style/NumericPredicate:
  Enabled: false

Style/RedundantParentheses:
  Enabled: false

Style/StringLiteralsInInterpolation:
  Enabled: false

Style/SymbolArray:
  Enabled: false

Style/SymbolProc:
  Enabled: false

Style/YodaCondition:
  Enabled: false

Style/ZeroLengthPredicate:
  Enabled: false

Style/BlockDelimiters:
  Enabled: false

Style/EmptyCaseCondition:
  Enabled: false

Style/MultilineIfModifier:
  Enabled: false

Style/RescueStandardError:
  Enabled: false

Style/StderrPuts:
  Enabled: false

Style/TernaryParentheses:
  Enabled: false

Style/EmptyElse:
  Enabled: false

Style/IfInsideElse:
  Enabled: false

Style/RedundantReturn:
  Enabled: false

Style/StructInheritance:
  Enabled: false

Style/DateTime:
  Enabled: false

Style/ParenthesesAroundCondition:
  Enabled: false

Style/RegexpLiteral:
  Enabled: false

Style/TrailingUnderscoreVariable:
  Enabled: false
